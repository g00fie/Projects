<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

use Symfony\Component\Validator\Constraints as Assert;

/**
 * Entity with structure like User in database. Parameters are written using Symfony Validation.
 *
 * @ORM\Entity(repositoryClass="App\Repository\UserRepository")
 *
 * @author Maciej BiliÅ„ski <thepigmansuper@gmail.com>
 */
class User implements UserInterface
{
    /**
     * Unique user's id. It's generated by database.
     *
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     *
     * @var int
     */
    private $id;

    /**
     * Email. Maximum length is 180 characters. It has to be unique.
     *
     * @ORM\Column(type="string", length=180, unique=true)
     *
     * @Assert\NotBlank()
     * @Assert\Email()
     * @Assert\Length(
     *  max = 180,
     * )
     *
     * @var string
     */
    private $email;

    /**
     * Roles to show right content. (ROLE_USER or ROLE_ADMIN). By default it's a empty array.
     *
     * @ORM\Column(type="json")
     *
     * @var array
     */
    private $roles = [];

    /**
     * Encrypted password.
     *
     * @ORM\Column(type="string")
     *
     * @var string
     */
    private $password;


    /**
     * Unencrypted password. Minimum length is 7 characters. It can be set only from form. Database doesn't store it.
     *
     * @Assert\Length(
     *  min=7
     * )
     *
     * @var ?string
     */
    private $unencryptedPassword;

    /**
     * Date of birth in format 'd.m.Y'. It can be null.
     *
     * @ORM\Column(type="date", nullable=true)
     *
     * @Assert\DateTime(
     *  format="d.m.Y"
     * )
     *
     * @var string
     */
    private $dateBirth;

    /**
     * Phone number. It has to be 9 digits or null.
     *
     * @ORM\Column(type="string", length=9, nullable=true)
     *
     * @Assert\Regex("/^\d{9}$/")
     *
     * @var string
     */
    private $phoneNumber;

    /**
     * User's name. It's visible name and don't have to be unique. Maximum length is 255 characters.
     *
     * @ORM\Column(type="string", length=255)
     *
     * @Assert\NotBlank()
     * @Assert\Length(
     *  max = 255
     * )
     *
     *
     * @var string
     */
    private $name;

    /**
     * Construct to faster set all parameters.
     * @param UserPasswordEncoderInterface $userPasswordEncoder Interface to encrypt password.
     * @param string                       $name                @see User::$name
     * @param string                       $email               @see User::$email
     * @param string                       $password            @see User::$unencryptedPassword
     * @param ?string                      $dateBirth           @see User::$dateBirth
     * @param ?string                      $phoneNumber         @see User::$phoneNumber
     */
    public function __construct(UserPasswordEncoderInterface $userPasswordEncoder, string $name, string $email, string $password, ?string $dateBirth=NULL, ?string $phoneNumber=NULL){
        $this->setName($name)
            ->setEmail($email)
            ->setPassword($password, $userPasswordEncoder)
            ->setDateBirth($dateBirth)
            ->setPhoneNumber($phoneNumber);
    }

    /**
     * Getter of parameter id
     * @return ?int @see User::$id
     */
    public function getId(): ?int{
        return $this->id;
    }

    /**
     * Getter of parameter email
     * @return string @see User::$email
     */
    public function getEmail(): string{
        return $this->email;
    }

    /**
     * Setter of parameter email
     * @param  string $email @see User::$email
     * @return User          Returns self
     */
    public function setEmail(string $email): self{
        $this->email = $email;

        return $this;
    }

    /**
     * Getter of parameter roles. It aways append 'ROLE_USER' to guarantee every user at least has 'ROLE_USER'.
     * @return array
     */
    public function getRoles(): array{
        $roles = $this->roles;
        $roles[] = 'ROLE_USER';

        return array_unique($roles);
    }

    /**
     * Setter of parameter roles.
     * @param  array $roles Possible value is only [ROLE_ADMIN]
     * @return User         Returns self
     */
    public function setRoles(array $roles): self{
        $this->roles = $roles;

        return $this;
    }

    /**
     * Getter of parameter password
     * @return string @see User::$password
     */
    public function getPassword(): string{
        return $this->password;
    }

    /**
     * Method to set up parameter unencryptedPassword and encrypt it to set up parameter password.
     * @param  string                       $password            @see User::$unencryptedPassword
     * @param  UserPasswordEncoderInterface $userPasswordEncoder Interface to encrypt password
     * @return User                                              Returns self
     */
    public function setPassword(string $password, UserPasswordEncoderInterface $userPasswordEncoder): self{
        $this->unencryptedPassword = $password;
        $this->password = $userPasswordEncoder->encodePassword($this, $password);

        return $this;
    }

    /**
     * Method to get unique user field.
     * @return string Returns email
     */
    public function getUsername(){
        return $this->getEmail();
    }

    /**
     * This method exists only because of implements Symfony\Component\Security\Core\User\UserInterface. It's empty method.
     * @return void Returns nothing
     */
    public function getSalt(){}

    /**
     * Removes sensitive data from the user (e.g. unencryptedPassword).
     * @return void
     */
    public function eraseCredentials(){
        $this->unencryptedPassword = null;
    }

    /**
     * Getter of parameter dateBirth.
     * @return ?string @see User::$dateBirth
     */
    public function getDateBirth(): ?string{
        return $this->dateBirth;
    }

    /**
     * Setter of parameter dateBirth.
     * @param  ?string $dateBirth @see User::$dateBirth
     * @return User               Returns self
     */
    public function setDateBirth(?string $dateBirth): self{
        $this->dateBirth = $dateBirth;

        return $this;
    }

    /**
     * Getter of parameter phoneNumber.
     * @return ?string @see User::$phoneNumber
     */
    public function getPhoneNumber(): ?string{
        return $this->phoneNumber;
    }

    /**
     * Setter of parameter phoneNumber.
     * @param  ?string $phoneNumber @see User::$phoneNumber
     * @return User                 Returns self
     */
    public function setPhoneNumber(?string $phoneNumber): self{
        $this->phoneNumber = $phoneNumber;

        return $this;
    }

    /**
     * Getter of parameter name.
     * @return ?string @see User::$name
     */
    public function getName(): ?string{
        return $this->name;
    }

    /**
     * Setter of parameter name.
     * @param  ?string $name @see User::$name
     * @return User          Returns self
     */
    public function setName(string $name): self{
        $this->name = $name;

        return $this;
    }
}
